using System;
using System.Linq;
using System.Net.Http;
using System.Reflection;
using HttpTracer;
using Microsoft.Extensions.DependencyInjection;
using Refit;
using Shiny.WebApi.Policing;
using Shiny.WebApi.Tracing;

namespace Shiny.WebApi
{
    public class WebApiModule : ShinyModule
    {
        readonly WebApiOptions webApiOptions;

        public WebApiModule(Type webApiType, Action<WebApiOptionsBuilder>? optionsAction = null)
        {
            this.webApiOptions = this.CreateWebApiOptions(webApiType, optionsAction);
        }

        public override void Register(IServiceCollection services)
        {
            var builder = services.AddHttpClient(ForType(this.webApiOptions.WebApiType))
                .ConfigurePrimaryHttpMessageHandler(() => new HttpTracerHandler(new HttpClientHandler
                {
                    AutomaticDecompression = this.webApiOptions.DecompressionMethods
                }, this.webApiOptions.HttpTracerVerbosity))
                .AddTypedClient(this.webApiOptions.WebApiType, (client, serviceProvider) => RestService.For(this.webApiOptions.WebApiType, client, this.webApiOptions.RefitSettingsFactory(serviceProvider)));

            if(this.webApiOptions.BaseAddress != null)
                builder.ConfigureHttpClient(x => x.BaseAddress = this.webApiOptions.BaseAddress);

            this.webApiOptions.HttpClientBuilder?.Invoke(builder);

            builder.ConfigureHttpClient(x =>
            {
                if(x.BaseAddress == null)
                    throw new ArgumentNullException(nameof(x.BaseAddress), $"You must provide a valid web api uri with the {nameof(WebApiAttribute)} or the options builder");
            });

            foreach (var policyRegistryKey in this.webApiOptions.PolicyRegistryKeys)
                builder.AddPolicyHandlerFromRegistry(policyRegistryKey);

            services.AddSingleton(typeof(IWebApi<>).MakeGenericType(this.webApiOptions.WebApiType), typeof(WebApi<>).MakeGenericType(this.webApiOptions.WebApiType));
        }

        static string ForType(Type refitInterfaceType)
        {
            string typeName;

            if (refitInterfaceType.IsNested)
            {
                var className = "AutoGenerated" + refitInterfaceType.DeclaringType.Name + refitInterfaceType.Name;
                typeName = refitInterfaceType.AssemblyQualifiedName.Replace(refitInterfaceType.DeclaringType.FullName + "+" + refitInterfaceType.Name, refitInterfaceType.Namespace + "." + className);
            }
            else
            {
                var className = "AutoGenerated" + refitInterfaceType.Name;

                if (refitInterfaceType.Namespace == null)
                {
                    className = $"{className}.{className}";
                }

                typeName = refitInterfaceType.AssemblyQualifiedName.Replace(refitInterfaceType.Name, className);
            }

            return typeName;
        }

        WebApiOptions CreateWebApiOptions(Type webApiType, Action<WebApiOptionsBuilder>? optionsAction = null)
        {
            var webApiAttribute = webApiType.GetTypeInfo().GetCustomAttribute<WebApiAttribute>(true);
            Uri.TryCreate(webApiAttribute?.BaseUri, UriKind.RelativeOrAbsolute, out var baseAddress);

            var traceAttribute = webApiType.GetTypeInfo().GetCustomAttribute<TraceAttribute>(true);

            var assemblyPolicyAttribute = webApiType.Assembly.GetCustomAttribute<PolicyAttribute>();

            var webApiPolicyAttribute = webApiType.GetTypeInfo().GetCustomAttribute<PolicyAttribute>(true);

            var optionsBuilder = new WebApiOptionsBuilder(new WebApiOptions(webApiType, 
                baseAddress,
                webApiAttribute?.DecompressionMethods, 
                traceAttribute?.Verbosity,
                assemblyPolicyAttribute?.RegistryKeys,
                webApiPolicyAttribute?.RegistryKeys));

            optionsAction?.Invoke(optionsBuilder);

            return optionsBuilder.WebApiOptions;
        }
    }
}

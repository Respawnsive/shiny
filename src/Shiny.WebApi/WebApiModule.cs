using System;
using System.Collections.Generic;
using System.Net;
using System.Net.Http;
using System.Text;
using HttpTracer;
using Microsoft.Extensions.DependencyInjection;
using Polly;
using Polly.Extensions.Http;
using Refit;

namespace Shiny.WebApi
{
    public class WebApiModule : ShinyModule
    {
        readonly WebApiOptions webApiOptions;

        public WebApiModule(Type webApiType, string baseUrl, Action<WebApiOptionsBuilder>? optionsAction = null)
        {
            if(baseUrl.IsEmpty() || !Uri.TryCreate(baseUrl, UriKind.RelativeOrAbsolute, out var baseAddress))
                throw new ArgumentException("baseUrl parameter should be a valid url");

            this.webApiOptions = this.CreateWebApiOptions(webApiType, baseAddress, optionsAction);
        }

        public override void Register(IServiceCollection services)
        {
            var builder = services.AddHttpClient(ForType(this.webApiOptions.WebApiType))
                .ConfigurePrimaryHttpMessageHandler(() => new HttpTracerHandler(new HttpClientHandler
                {
                    AutomaticDecompression = this.webApiOptions.DecompressionMethods
                }, this.webApiOptions.HttpTracerVerbosity))
                .AddTypedClient(this.webApiOptions.WebApiType, (client, serviceProvider) => RestService.For(this.webApiOptions.WebApiType, client, this.webApiOptions.RefitSettingsFactory(serviceProvider)))
                .ConfigureHttpClient(x => x.BaseAddress = this.webApiOptions.BaseAddress);

            this.webApiOptions.HttpClientBuilder?.Invoke(builder);
        }

        /// <summary>
        /// Refit private method
        /// </summary>
        static string ForType(Type refitInterfaceType)
        {
            string typeName;

            if (refitInterfaceType.IsNested)
            {
                var className = "AutoGenerated" + refitInterfaceType.DeclaringType.Name + refitInterfaceType.Name;
                typeName = refitInterfaceType.AssemblyQualifiedName.Replace(refitInterfaceType.DeclaringType.FullName + "+" + refitInterfaceType.Name, refitInterfaceType.Namespace + "." + className);
            }
            else
            {
                var className = "AutoGenerated" + refitInterfaceType.Name;

                if (refitInterfaceType.Namespace == null)
                {
                    className = $"{className}.{className}";
                }

                typeName = refitInterfaceType.AssemblyQualifiedName.Replace(refitInterfaceType.Name, className);
            }

            return typeName;
        }

        WebApiOptions CreateWebApiOptions(Type webApiType, Uri baseAddress, Action<WebApiOptionsBuilder>? optionsAction = null)
        {
            var optionsBuilder = new WebApiOptionsBuilder(new WebApiOptions(webApiType, baseAddress));

            optionsAction?.Invoke(optionsBuilder);

            return optionsBuilder.WebApiOptions;
        }
    }
}
